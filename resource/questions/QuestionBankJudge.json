{
  "列表对象的排序方法sort____只能按元素从小到大排列,不支持别的排序方式。": "F",
  "形参可以看做是函数内部的局部变量,函数运行结束之后形参就不可访问了": "T",
  "一个函数如果带有默认值参数,那么必须所有参数都设置默认值": "F",
  "表达式‘a’+1的值为’b’": "F",
  "已知x为非空列表,那么执行语句x[0] = 3之后,列表对象x的内存地址不变": "T",
  "在Python 3.x中可以使用中文作为变量名": "T",
  "Python集合中的元素可以是元组。": "T",
  "在函数内部直接修改形参的值并不影响外部实参的值": "T",
  "在定义函数时, 某个参数名字前面带有一个符号表示可变长度参数, 可以接收任意多个普通实参并存放于一个元组之中。（接收多个参数，用的是p，而不是p*（这个表示的是乘））": "T",
  "定义函数时, 即使该函数不需要接收任何参数, 也必须保留一对空的圆括号来表示这是一个函数": "T",
  "运算符 / 在Python 2.x和Python 3.x中具有相同的功能": "F",
  "已知列表 x = [1, 2, 3], 那么执行语句 x = 3 之后, 变量x的地址不变": "F",
  "Python中定义函数时不需要声明函数参数的类型": "T",
  "表达式 {}==None 的值为True": "F",
  "在Windows平台上编写的Python程序无法在Unix平台运行": "F",
  "在定义函数时, 某个参数名字前面带有两个*符号表示可变长度参数, 可以接收任意多个关键参数并将其存放于一个字典之中": "T",
  "对于数字n，如果表达式 0 not in [n%d for d in range(2, n)] 的值为True则说明n是素数": "T",
  "调用带有默认值参数的函数时, 不能为默认值参数传递任何值,必须使用函数定义时设置的默认值。": "F",
  "已知x是个列表对象, 那么执行语句y = x[:]之后, 对y所做的任何操作都会同样作用到x上。": "F",
  "可以使用del删除集合中的部分元素": "F",
  "Python字符串方法replace____对字符串进行原地修改": "F",
  "Python不允许使用关键字作为变量名, 允许使用内置函数名作为变量名, 但这会改变函数名的含义。": "T",
  "在Python 3.x中, 使用内置函数input____接收用户输入时, 不论用户输入的什么格式, 一律按字符串进行返回": "T",
  "在Python中, 变量不直接存储值, 而是存储值的引用, 也就是值在内存中的地址": "T",
  "已知x = {1: 1, 2: 2}, 那么语句x[3] =3无法正常执行": "F",
  "已知列表x = [1, 2, 3, 4]，那么表达式x.find(5)的值应为-1。": "F",
  "同一个列表对象中所有元素必须为相同类型": "F",
  "包含yield语句的函数一般成为生成器函数, 可以用来创建生成器对象": "T",
  "在函数内部没有任何声明的情况下直接为某个变量赋值, 这个变量一定是函数内部的局部变量": "T",
  "在编写多层循环时,为了提高运行效率, 应尽量减少内循环中不必要的计算": "T",
  "在函数中yield语句的作用和return完全一样": "F",
  "Python变量名区分大小写, 所以student和Student不是同一个变量": "T",
  "在Python中, 任意长的字符串都遵守驻留机制": "F",
  "函数内部定义的局部变量当函数调用结束后被自动删除": "T",
  "Python关键字不可以作为变量名": "T",
  "在任何时刻相同的值在内存中都只保留一份": "F",
  "在Python中0xad是合法的十六进制数字表示形式": "T",
  "在同一个作用域内, 局部变量会隐藏同名的全局变量": "T",
  "集合可以作为字典的键": "F",
  "删除列表中重复元素最简单的方法是将其转换为集合后再重新转换为列表": "T",
  "Python采用的是基于值得自动内存管理方式": "T",
  "Python集合可以包含相同的元素。": "F",
  "函数是代码复用的一种方式": "T",
  "使用Python列表的方法insert____为列表插入元素时会改变列表中插入位置之后元素的索引": "F",
  "如果只需要math模块中的sin____函数, 建议使用from math import sin来导入, 而不要使用import math导入整个模块。": "T",
  "当作为条件表达式时, {}与None等价": "T",
  "对于大量列表的连接, extend____方法比运算符+具有更高的效率": "T",
  "在调用函数时, 可以通过关键参数的形式进行传值, 从而避免必须记住函数形参顺序的麻烦": "T",
  "调用函数时, 在实参前面加一个型号*表示序列解包": "T",
  "pip命令也支持扩展名为.whl的文件直接安装Python扩展库": "T"
}